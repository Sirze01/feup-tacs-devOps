/**
 */
package devOps.provider;

import devOps.util.DevOpsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DevOpsItemProviderAdapterFactory extends DevOpsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DevOpsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.Pipeline} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PipelineItemProvider pipelineItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.Pipeline}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPipelineAdapter() {
		if (pipelineItemProvider == null) {
			pipelineItemProvider = new PipelineItemProvider(this);
		}

		return pipelineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.Stage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StageItemProvider stageItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.Stage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStageAdapter() {
		if (stageItemProvider == null) {
			stageItemProvider = new StageItemProvider(this);
		}

		return stageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringToStringMapEntryItemProvider stringToStringMapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringToStringMapEntryAdapter() {
		if (stringToStringMapEntryItemProvider == null) {
			stringToStringMapEntryItemProvider = new StringToStringMapEntryItemProvider(this);
		}

		return stringToStringMapEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.Environment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnvironmentItemProvider environmentItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.Environment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnvironmentAdapter() {
		if (environmentItemProvider == null) {
			environmentItemProvider = new EnvironmentItemProvider(this);
		}

		return environmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.Step} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepItemProvider stepItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.Step}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepAdapter() {
		if (stepItemProvider == null) {
			stepItemProvider = new StepItemProvider(this);
		}

		return stepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.Trigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerItemProvider triggerItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.Trigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerAdapter() {
		if (triggerItemProvider == null) {
			triggerItemProvider = new TriggerItemProvider(this);
		}

		return triggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.RepositoryEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepositoryEventItemProvider repositoryEventItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.RepositoryEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepositoryEventAdapter() {
		if (repositoryEventItemProvider == null) {
			repositoryEventItemProvider = new RepositoryEventItemProvider(this);
		}

		return repositoryEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.WebHook} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebHookItemProvider webHookItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.WebHook}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebHookAdapter() {
		if (webHookItemProvider == null) {
			webHookItemProvider = new WebHookItemProvider(this);
		}

		return webHookItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.APITrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APITriggerItemProvider apiTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.APITrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPITriggerAdapter() {
		if (apiTriggerItemProvider == null) {
			apiTriggerItemProvider = new APITriggerItemProvider(this);
		}

		return apiTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.Runner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunnerItemProvider runnerItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.Runner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunnerAdapter() {
		if (runnerItemProvider == null) {
			runnerItemProvider = new RunnerItemProvider(this);
		}

		return runnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.IaaS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IaaSItemProvider iaaSItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.IaaS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIaaSAdapter() {
		if (iaaSItemProvider == null) {
			iaaSItemProvider = new IaaSItemProvider(this);
		}

		return iaaSItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.ContainerEngine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerEngineItemProvider containerEngineItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.ContainerEngine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerEngineAdapter() {
		if (containerEngineItemProvider == null) {
			containerEngineItemProvider = new ContainerEngineItemProvider(this);
		}

		return containerEngineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.OperatingSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatingSystemItemProvider operatingSystemItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.OperatingSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatingSystemAdapter() {
		if (operatingSystemItemProvider == null) {
			operatingSystemItemProvider = new OperatingSystemItemProvider(this);
		}

		return operatingSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.SelfHostedRunner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelfHostedRunnerItemProvider selfHostedRunnerItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.SelfHostedRunner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelfHostedRunnerAdapter() {
		if (selfHostedRunnerItemProvider == null) {
			selfHostedRunnerItemProvider = new SelfHostedRunnerItemProvider(this);
		}

		return selfHostedRunnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.SSHRunner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSHRunnerItemProvider sshRunnerItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.SSHRunner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSHRunnerAdapter() {
		if (sshRunnerItemProvider == null) {
			sshRunnerItemProvider = new SSHRunnerItemProvider(this);
		}

		return sshRunnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.PhoneHomeRunner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhoneHomeRunnerItemProvider phoneHomeRunnerItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.PhoneHomeRunner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhoneHomeRunnerAdapter() {
		if (phoneHomeRunnerItemProvider == null) {
			phoneHomeRunnerItemProvider = new PhoneHomeRunnerItemProvider(this);
		}

		return phoneHomeRunnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.Conditional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalItemProvider conditionalItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.Conditional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalAdapter() {
		if (conditionalItemProvider == null) {
			conditionalItemProvider = new ConditionalItemProvider(this);
		}

		return conditionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.UnaryConditional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryConditionalItemProvider unaryConditionalItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.UnaryConditional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryConditionalAdapter() {
		if (unaryConditionalItemProvider == null) {
			unaryConditionalItemProvider = new UnaryConditionalItemProvider(this);
		}

		return unaryConditionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.BinaryConditional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryConditionalItemProvider binaryConditionalItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.BinaryConditional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryConditionalAdapter() {
		if (binaryConditionalItemProvider == null) {
			binaryConditionalItemProvider = new BinaryConditionalItemProvider(this);
		}

		return binaryConditionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.Operand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperandItemProvider operandItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.Operand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperandAdapter() {
		if (operandItemProvider == null) {
			operandItemProvider = new OperandItemProvider(this);
		}

		return operandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.LogicOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicOperatorItemProvider logicOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.LogicOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicOperatorAdapter() {
		if (logicOperatorItemProvider == null) {
			logicOperatorItemProvider = new LogicOperatorItemProvider(this);
		}

		return logicOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.CronTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CronTriggerItemProvider cronTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.CronTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCronTriggerAdapter() {
		if (cronTriggerItemProvider == null) {
			cronTriggerItemProvider = new CronTriggerItemProvider(this);
		}

		return cronTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.MergeRequest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeRequestItemProvider mergeRequestItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.MergeRequest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeRequestAdapter() {
		if (mergeRequestItemProvider == null) {
			mergeRequestItemProvider = new MergeRequestItemProvider(this);
		}

		return mergeRequestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link devOps.Push} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PushItemProvider pushItemProvider;

	/**
	 * This creates an adapter for a {@link devOps.Push}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPushAdapter() {
		if (pushItemProvider == null) {
			pushItemProvider = new PushItemProvider(this);
		}

		return pushItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (pipelineItemProvider != null) pipelineItemProvider.dispose();
		if (stageItemProvider != null) stageItemProvider.dispose();
		if (stringToStringMapEntryItemProvider != null) stringToStringMapEntryItemProvider.dispose();
		if (environmentItemProvider != null) environmentItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (stepItemProvider != null) stepItemProvider.dispose();
		if (triggerItemProvider != null) triggerItemProvider.dispose();
		if (repositoryEventItemProvider != null) repositoryEventItemProvider.dispose();
		if (webHookItemProvider != null) webHookItemProvider.dispose();
		if (apiTriggerItemProvider != null) apiTriggerItemProvider.dispose();
		if (runnerItemProvider != null) runnerItemProvider.dispose();
		if (iaaSItemProvider != null) iaaSItemProvider.dispose();
		if (containerEngineItemProvider != null) containerEngineItemProvider.dispose();
		if (operatingSystemItemProvider != null) operatingSystemItemProvider.dispose();
		if (selfHostedRunnerItemProvider != null) selfHostedRunnerItemProvider.dispose();
		if (sshRunnerItemProvider != null) sshRunnerItemProvider.dispose();
		if (phoneHomeRunnerItemProvider != null) phoneHomeRunnerItemProvider.dispose();
		if (conditionalItemProvider != null) conditionalItemProvider.dispose();
		if (unaryConditionalItemProvider != null) unaryConditionalItemProvider.dispose();
		if (binaryConditionalItemProvider != null) binaryConditionalItemProvider.dispose();
		if (operandItemProvider != null) operandItemProvider.dispose();
		if (logicOperatorItemProvider != null) logicOperatorItemProvider.dispose();
		if (cronTriggerItemProvider != null) cronTriggerItemProvider.dispose();
		if (mergeRequestItemProvider != null) mergeRequestItemProvider.dispose();
		if (pushItemProvider != null) pushItemProvider.dispose();
	}

}

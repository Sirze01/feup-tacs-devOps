[comment encoding = UTF-8 /]
[module generate('http://www.example.org/examples/devops.ecore')]

[template public generatePipeline(aPipeline : Pipeline)]
[comment @main/]
[file (aPipeline.name.concat('.yml'), false, 'UTF-8')]
name: [aPipeline.name/]

on:
[for (trigger : Trigger | aPipeline.triggers)]
	[trigger.generateTrigger()/]
[/for]
[aPipeline.environment.generateEnvironment()/]
jobs:
[for (stage: Stage | aPipeline.stages)]
	[let previousStage : Stage = if i > 1 then aPipeline.stages->at(i-1) else stage endif]
	[for (task: Task | stage.tasks)]
	[let runAlways : Boolean = i > 1 and (stage.tasks->at(i-1).allowFailure)]
	[task.generateTask(aPipeline, stage, runAlways, previousStage)/]
	[/let]
	[/for]
	[/let]
[/for]
[/file]
[/template]

[template public generateTask(aTask : Task, aPipeline: Pipeline, aStage: Stage,
runAlways: Boolean, previousStage: Stage)]
[comment runner/]
[aTask.name + ':'/]
	[comment environment/]
	[aTask.environment.generateEnvironment()/]
	[comment gh actions are parallel by default, so let us add our sequential stage semantic/]
	[if (previousStage <> null and previousStage <> aStage)]
	needs: ['['/][for (task: Task | previousStage.tasks) separator (', ')][task.name/][/for][']'/]
	[/if]
	[comment run always if previous task allows failure/]
	[if (runAlways)]
	if: always()
	[/if]
	[comment condition/]
	[if (aStage.conditional <> null)]
	if: [aStage.conditional.condition/]
	[/if]
	[comment runner/]
	[if (aTask.runner <> null)]
	runs_on: [aTask.runner.generateRunner()/]
	[/if]
	[if (aTask.runner = null)]
	runs_on: [aPipeline.runner.generateRunner()/]
	[/if]
	steps:
	[comment registryTasksUses/]
	[for (step: Step | aTask.steps)]
		[if (step.eClass().name = 'RegistryTask')]
		- uses: [step.oclAsType(RegistryTask).name/]
		[if (not step.oclAsType(RegistryTask).arguments->isEmpty())]
		  with:
			[for (entry: StringToStringMapEntry | step.oclAsType(RegistryTask).arguments)]
			[entry.key/]: [entry.value/]
			[/for]
		[/if]
		[/if]
	[/for]
	[comment commands/]
		[for (step: Step | aTask.steps)]
		[if (step.eClass().name = 'Command')]
		- run: [step.oclAsType(Command).cmd/]
		[if (step.conditional <> null)]
		  if: [step.conditional.condition/]
		[/if]
		[/if]
		[/for]
[/template]

[template public generateEnvironment(aEnvironment: Environment)]
[if (not aEnvironment.variables->isEmpty())]
env:
	[for (entry: StringToStringMapEntry | aEnvironment.variables)]
	[entry.key/]: [entry.value/]
	[/for]
[/if]
[/template]

[template public generateRunner(aRunner: Runner)]
[if (aRunner.eClass().name = 'OperatingSystem')]
[aRunner.oclAsType(OperatingSystem).osName/]
[/if]
[if (aRunner.eClass().name <> 'OperatingSystem')]
self-hosted
[/if]
[/template]

[template public generateTrigger(aTrigger: Trigger)]
[if (aTrigger.eClass().name = 'Push')]
push: [aTrigger.oclAsType(Push).branch/]
[/if]
[if (aTrigger.eClass().name = 'MergeRequest')]
pull_request: [aTrigger.oclAsType(MergeRequest).branch/]
[/if]
[if (aTrigger.eClass().name = 'APITrigger')]
workflow_dispatch
[/if]
[if (aTrigger.eClass().name = 'WebHook')]
workflow_dispatch
[/if]
[if (aTrigger.eClass().name = 'CronTrigger')]
schedule:
[comment posix cron syntax/]
	cron: "[aTrigger.oclAsType(CronTrigger).hours/] [aTrigger.oclAsType(CronTrigger).minutes/]"
[/if]
[/template]